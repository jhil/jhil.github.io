!function(e){"use strict";function i(){var e,i=document.createElement("fakeelement"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",MSTransition:"msTransitionEnd",OTransition:"otransitionend",transition:"transitionend"};for(e in t)if(t.hasOwnProperty(e)&&void 0!==i.style[e])return t[e]}function t(e){return this.viewerOpen=!1,this.figure=e,this.lastWindowWidth=window.innerWidth,this.transitionEndEvent=i(),this.forceSmall=this.figure.className.indexOf("force-small")>=0,this.forceMedium=this.figure.className.indexOf("force-medium")>=0,this.forceLarge=this.figure.className.indexOf("force-large")>=0,this.load(),this.figure.className.indexOf("with-viewer")>=0&&this.figure.addEventListener("click",this.openViewer.bind(this)),this}t.prototype.closeViewer=function(){window.removeEventListener("scroll",this.onScroll),this.figure.addEventListener(this.transitionEndEvent,function(){document.body.className.indexOf("viewer-open")==-1&&(this.viewerOpen=!1,this.figure.className=this.figure.className.replace("viewer-open","").replace(/^\s+|\s+$/g,""),this.figure.style.zIndex="")}.bind(this)),document.body.className=document.body.className.replace("viewer-open","").replace(/^\s+|\s+$/g,""),this.figure.style.transform=""},t.prototype.openViewer=function(){if(document.body.className.indexOf("viewer-open")>=0)return void this.closeViewer();this.viewerOpen=!0;var e,i,t,n=window.getComputedStyle(this.figure),s=parseFloat(n.height),r=parseFloat(n.width),o=window.innerHeight,a=window.innerWidth,d=this.figure.getBoundingClientRect(),l=r/s,h=a/o;if(h>=l){e=o/s;var f=r*e;i=(a-f)/2-d.left,t=d.top*-1}else{e=a/r;var c=s*e;t=(o-c)/2-d.top,i=d.left*-1}document.body.className+=" viewer-open",this.figure.className+=" viewer-open",this.figure.style.zIndex="800",this.figure.style.transform="translate3d("+i+"px,"+t+"px,0) scale("+e+")",setTimeout(function(){this.figure.className.indexOf("loaded-raw")<=0&&this.loadRaw()}.bind(this),300),this.onScroll=function(){var e=this.figure.getBoundingClientRect().top;Math.abs(e)>50&&this.closeViewer()}.bind(this),this.onResize=function(){this.closeViewer()}.bind(this),window.addEventListener("resize",this.onResize),window.addEventListener("orientationchange",this.onResize),window.addEventListener("scroll",this.onScroll)},t.prototype.load=function(){var e=new Image;e.src=this.figure.dataset[this.getSize()],e.className="full",e.onload=function(){this.figure.className+=" loaded"}.bind(this),this.figure.appendChild(e)},t.prototype.loadRaw=function(){var e=new Image;e.src=this.figure.dataset.raw,e.className="raw",e.onload=function(){this.figure.className+=" loaded-raw"}.bind(this),this.figure.appendChild(e)},t.prototype.getSize=function(){if(this.forceSmall)return"small";if(this.forceMedium)return"medium";if(this.forceLarge)return"large";var e,i=["small","medium","large"];return e=this.lastWindowWidth<768?0:this.lastWindowWidth<1440?1:2,window.devicePixelRatio>1&&e<2&&(e+=1),i[e]},"function"==typeof define&&define.amd?define(t):"undefined"!=typeof module&&module.exports?module.exports=t:e.ProgressiveImage=t}(this);
//# sourceMappingURL=data:application/json;base64,